
= コード速読術

笹倉が書くところ


== なぜ、あなたのコードリーディングは遅いのか？

=== 読書の「常識」を捨てよ
 * 小説のように一行ずつ丁寧に読むのは非効率。
 * 脳は文字の羅列を追うのではなく、意味のまとまりを認識するようにできている。

=== 完璧主義が邪魔をする
 * 全てを完全に理解しようとする必要はない。
 * 8割の理解で、2割の重要な情報にたどり着くための思考法を身につける。

=== 「全体像」を最初に描けていない
 * 木を一本ずつ見ていては、森全体は見えない。
 * 最初にファイル構造や主要なクラスの役割を俯瞰し、脳内に地図を作成する重要性。


== コードを「スキャン」するための視点

=== 目的別に読む
 * 「バグを直したい」→怪しい部分に絞り込み、ログやテストコードから逆引きする。
 * 「機能を実装したい」→類似の機能や関連するインターフェースを探す。
 * 「レビューしたい」→変更差分とコミットメッセージに集中する。

=== コードを「色」と「形」で捉える
 * IDEのシンタックスハイライトを最大限に活用する。予約語、文字列、変数など、色で情報を区別する。
 * インデントや空白行によって作られるコードの「形」から、ブロック構造を直感的に理解する。

=== 「音」でコードを聴く
 * 変数名や関数名が**「何をしようとしているのか」**を語っている。
 * 読みやすい命名規約のプロジェクトでは、コードを読み進めるだけでストーリーが頭に入ってくる。


== 思考を加速させる「パターン認識」の技術

=== テンプレートを見つけ出せ
 * おなじみのフレームワークの規約や、デザインパターン（ファクトリー、ストラテジーなど）は、実装の詳細を読まずとも意図を推測できる強力な手がかり。
 * 繰り返し現れる定型的なコードパターン（for...range や if err != nil など）は、見つけた瞬間に**「意味のチャンク」**として脳にインプットする。

=== 文脈から推測する
 * この関数はどこから呼ばれているのか？
 * この変数はどこで値が設定されているのか？
 * **コードの背後にある「流れ」**を想像することで、読解スピードが格段に上がる。

=== 脳の負担を減らす
 * 複雑なロジックは、メモ帳やホワイトボードに図示してみる。
 * 一度に多くの情報を処理しようとせず、**「今知りたいこと」**だけに焦点を絞る。


== ツールがもたらす超速読の世界
=== IDEは「読むための相棒」
 * **「Go to Definition」と「Find Usages」**で、コードを瞬時にナビゲートする。
 * **「Call Hierarchy」**で関数の呼び出しツリーを視覚化する。
 * デバッガーを使って、動的にコードの流れを追跡する。

=== Gitは最強の「歴史書」
 * git blame で誰が、なぜそのコードを書いたのかを把握する。
* git log で過去のコミットメッセージから、変更の背景を読み解く。

=== AIアシスタントを使いこなす
 * 複雑なロジックや正規表現を、AIに要約させる。
 * 新しいAPIの使い方をAIに尋ね、素早く概要を掴む。

== おわりに：コードを読むことは、最高の学習法である
 * 速読術は単なる技術ではなく、より良い設計、より良いコードを書くための視点を養うプロセスです。
 * 他人のコードを読むことで、自分の引き出しを増やすことができます。 * 本書で学んだことを日々の開発に活かし、**「コードを読むのが楽しい」**と感じられるプログラマーになってください。
