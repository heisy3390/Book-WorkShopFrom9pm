= コード速読術

「コードを読んでるんだけど、なかなか読み進められない・・・」
そんなことを思いながら、コードを読んでいませんか？

私も昔はそうでした。
修正や障害対応の調査のため、コードを1行1行、場合によっては1文字ずつ読んでいましたが、なかなか終わりません。それに読む場所が収集つかなくなり、「結局、何を調べていたんんだっけ？」と迷い、調査が終わらず、徒労感に苛まれるが多々ありました。

私はITエンジニアであるため、IT技術の本を読むことが多いのですが、読む速度も遅く、苦労していたため、通信講座で速読を勉強しました。その結果、ある程度早く本を読めるようになりました。それに伴い、コードも素早く読めるようになりました。

コードが素早く読めるようになると、以下の業務も素早く終わるようになりました。

 * コードレビュー
 * 技術記事などのキャッチアップ
 * コードの調査・解析
 * コードのバグの特定

コードの速読は、コーディングの速度を高め、知識を得るためのチートスキルであります。その思いをこの章で記載していければと思います。
コードを素早く、かつ正確に理解するための具体的なテクニックとマインドセットを習得するキッカケになれば幸いです。

@<embed>{|latex|\clearpage}


== なぜ、あなたのコードリーディングは遅いのか？

=== 「コードを読むこと」と読書は違う
小説を読書する場合、1行ずつで読んでいきます。
通常は、コードも同じように1行ずつ丁寧に読むかと思いますが、非効率です。
脳は文字の羅列を追うのではなく、意味のまとまりを認識するようにできているからです。
またコードはスコープ単位で動作を記載するため、1行ずつ読む必要はありません。
以下のコードを例に解説します。


//listnum[FileReader][ファイルを読み、標準出力へファイルの内容を出力][java]{
String filePath = "sample.txt";

try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {
    String line;
    while ((line = reader.readLine()) != null) {
        System.out.println(line);
    }
}
//}

上記はファイルを読み、標準出力へファイルの内容を1行ごとに出力するコードです。

このコードを1行ごとに切り分けていきましょう。

//listnum[FileOpen][ファイルを開く][java]{
try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {
//}

上記箇所でファイルを開きます。

//listnum[FileRead1line][ファイルを1行読む][java]{
    while ((line = reader.readLine()) != null) 
//}

上記箇所でファイルを1行ごとに読みます。

//listnum[Output][ファイルを読むサンプル][java]{
        System.out.println(line);
//}

上記箇所で読んだファイル1行分のデータを標準出力へ出力します。


この通り、1行ずづ読むと上記のような感じにありますが、とても時間がかかります。
「ファイルを読み、標準出力へファイルの内容を1行ごとに出力する」コードですから、１つの固まりとして捉えて、読む方が効率的です。
「ちゃんと読まないと、そんなコードなのか、分からないじゃない！」という意見が出ると思いますが、その通りですw
そのご意見については、次のセクションで説明します。



=== 完璧主義が邪魔をする
コードを読む時、<strong>全てを完全に理解しようとする必要はありません。</strong>
コードの多くが定型の記述であり、8割程度の理解で、該当のコードが何をしているか、理解することが可能だからです。そのため、コードを完璧に理解する必要はありません。

//listnum[FileReader][ファイルを読み、標準出力へファイルの内容を出力][java]{
String filePath = "sample.txt";

try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {
    String line;
    while ((line = reader.readLine()) != null) {
        System.out.println(line);
    }
}
//}

前のセクションで見せたコードです。
Javaのご経験が豊富な方はすぐに読めて、どのような処理をするか判断できると思いますが、ご経験や知識が少ない方は難しいと思います。
が！
上記の通り、完璧に理解する必要はありません。「ファイルを読んで、出力しようとしているんだろうな〜」という程度の理解で良いのです。


=== コードの「全体像」を描けていない
「木を一本ずつ見ていては、森全体は見えない」という言葉があります。
コードを読む時、特定の処理、特定の関数、特定のクラスだけを着目して読んでいては、コード全体の動作を理解することにとても時間がかかってしまいます。
そのため、最初にファイル構造や主要なクラスの役割を俯瞰し、だいたいの動作を抑え、頭の中で処理の大まかな処理フローを作成することが重要です。

前のセクションにも通じますが、コード1行1行を見ていては、時間が非常にかかり、非効率です。
そのため、全体を捉えるように、ざっと読んでいくことが望ましいと考えています。
もし気になったら、そのときに気になったコードを注視して、丁寧に見ればよいのです。


@<embed>{|latex|\clearpage}


== コードを「スキャン」するための視点

前章ではコードの速読をするための心構えについて書いてきました。
本章では、コードを読み込み、取り込んでいく「スキャン」の視点について書いていきます。

=== 目的別に読む

コードを読む目的が明確だと、読む速度も向上します。
体表的な例を挙げて、説明します。

==== バグを直したい

怪しい部分に絞り込み、ログやテストコードから逆引きすると、早めにバグを特定しやくなります。


==== 機能を実装したい

類似の機能や関連するインターフェースを中心に探すことも有効的です。


==== レビューしたい

変更差分とコミットのメッセージのみに集中して読むと、読む範囲が限られてくるため、素早くレビューすることが可能です。


=== コードを「色」と「形」で捉える

Visual Studio CodeやAtom、IntelliJ IDEAなど優れたIDEの機能によって、コードの可読性を高めることもコードの速読にとても有効です。
以下が有効的な機能です。

 * IDEのシンタックスハイライトを最大限に活用する
 * 予約語、文字列、変数など、色で情報を区別する
 * インデントや空白行によって作られるコードの「形」から、ブロック構造を理解する

=== 名前からコードを読み解く

優れたコードは変数名・関数名・クラス名などに、意図や目的が明確で分かりやすい名前をつけています。
そのような変数名・関数名・クラス名を見ると、変数名・関数名・クラス名を見るだけで、**「何をしようとしているのか」** を語っていることが多いです。読みやすい名前だと、コードを読み進めるだけで、処理の一連の流れである「ストーリー」が頭に入ってきます。

多くのプロジェクトや現場では、命名規約を定めていますが、上記のように「ストーリー」となるような命名規約が望ましいです。


@<embed>{|latex|\clearpage}


== コードリーディングを加速させるテクニック

今まではコードを素早く読むためのマインドが中心でしたが、この章ではコードリーディングを早く読むための具体的なテクニックについて書いていきます。

=== テンプレートを見つけ出せ！
 * おなじみのフレームワークの規約や、デザインパターン（ファクトリー、ストラテジーなど）は、実装の詳細を読まずとも意図を推測できる強力な手がかりとなります。
 * 繰り返し現れる定型的なコードパターン（for...range や if err != nil など）は、見つけた瞬間に **「意味のチャンク」** として脳にインプットしておくと、素早く読むことが可能です。

=== コードの文脈から推測する
以下の点を推測しながら、コードを読むと、コードの背後にある「流れ」を想像でき、読解スピードが格段に高まります。

 * この関数はどこから呼ばれているのか？
 * この変数はどこで値が設定されているのか？

=== 脳の負担を減らす

コードの量が多かったり、難解な処理の場合、とても疲れます。
以下のようなテクニックで、脳の負担を減らすことによって、読解スピードを高めることも可能です。

 * 複雑なロジックは、メモ帳やホワイトボードに図示してみる
 * 一度に多くのコードを読まない
 * 「今知りたいこと」 だけに焦点を絞る

時間や範囲を決めて、段階的に読むことも有効的です。


@<embed>{|latex|\clearpage}

== ツールがもたらす超速読の世界
=== IDEは「読むための相棒」
 * **「Go to Definition」と「Find Usages」**で、コードを瞬時にナビゲートする。
 * **「Call Hierarchy」**で関数の呼び出しツリーを視覚化する。
 * デバッガーを使って、動的にコードの流れを追跡する。

=== Gitは最強の「歴史書」
 * git blame で誰が、なぜそのコードを書いたのかを把握する。
* git log で過去のコミットメッセージから、変更の背景を読み解く。

=== AIアシスタントを使いこなす
 * 複雑なロジックや正規表現を、AIに要約させる。
 * 新しいAPIの使い方をAIに尋ね、素早く概要を掴む。


@<embed>{|latex|\clearpage}

== おわりに：コードを読むことは、最高の学習法である
速読術は単なる技術ではなく、より良い設計、より良いコードを書くための視点を養うプロセスです。
他人のコードを読むことで、自分の引き出しを増やすことができます。
本章で学んだことを日々の開発に活かし、**「コードを読むのが楽しい」** と感じられるようになれば幸いです。
